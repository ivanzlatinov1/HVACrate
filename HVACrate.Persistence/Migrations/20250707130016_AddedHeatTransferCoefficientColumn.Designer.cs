// <auto-generated />
using System;
using HVACrate.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace HVACrate.Persistence.Migrations
{
    [DbContext(typeof(HVACrateDbContext))]
    [Migration("20250707130016_AddedHeatTransferCoefficientColumn")]
    partial class AddedHeatTransferCoefficientColumn
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("HVACrate.Domain.Entities.Building", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasComment("Building's unique identifier");

                    b.Property<int>("Floors")
                        .HasColumnType("integer")
                        .HasComment("The number of floors in the building");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(2048)
                        .IsUnicode(true)
                        .HasColumnType("character varying(2048)")
                        .HasComment("An image of the building");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(120)
                        .IsUnicode(true)
                        .HasColumnType("character varying(120)")
                        .HasComment("Building's geographical placement");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .IsUnicode(true)
                        .HasColumnType("character varying(80)")
                        .HasComment("Name of the building");

                    b.Property<string>("Orientation")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasComment("Is the building landscape or portrait");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid")
                        .HasComment("Reference to the project this building belongs to");

                    b.Property<double>("TotalHeight")
                        .HasPrecision(18, 2)
                        .HasColumnType("double precision")
                        .HasComment("Total height of the building");

                    b.Property<double>("WindSpeed")
                        .HasPrecision(18, 2)
                        .HasColumnType("double precision")
                        .HasComment("Wind speed used for infiltration");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Buildings", (string)null);
                });

            modelBuilder.Entity("HVACrate.Domain.Entities.BuildingEnvelope", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasComment("Building envelope's unique identifier");

                    b.Property<int>("Count")
                        .HasColumnType("integer")
                        .HasComment("The count of the building envelopes");

                    b.Property<double>("Density")
                        .HasPrecision(18, 2)
                        .HasColumnType("double precision")
                        .HasComment("The density of the building envelope");

                    b.Property<double>("HeatTransferCoefficient")
                        .HasPrecision(18, 2)
                        .HasColumnType("double precision")
                        .HasComment("Overall heat transfer coefficient (U-value) in W/m²·K");

                    b.Property<double>("Height")
                        .HasPrecision(18, 2)
                        .HasColumnType("double precision")
                        .HasComment("The height of the building envelope");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<Guid>("MaterialId")
                        .HasColumnType("uuid")
                        .HasComment("Reference to the material of the building envelope");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid")
                        .HasComment("Reference to the room this building envelope belongs to");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasComment("Type of the building envelope, e.g., OuterWall, Roof, Floor");

                    b.Property<double>("Width")
                        .HasPrecision(18, 2)
                        .HasColumnType("double precision")
                        .HasComment("The width of the building envelope");

                    b.Property<double>("ZOrientationCoefficient")
                        .HasPrecision(18, 2)
                        .HasColumnType("double precision")
                        .HasComment("Orientation coefficient (Zo)");

                    b.HasKey("Id");

                    b.HasIndex("MaterialId");

                    b.HasIndex("RoomId");

                    b.ToTable("BuildingEnvelopes", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("HVACrate.Domain.Entities.HVACUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .HasMaxLength(80)
                        .IsUnicode(true)
                        .HasColumnType("character varying(80)");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("ProfilePictureUrl")
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<DateTimeOffset>("RegisteredOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("HVACrate.Domain.Entities.Material", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasComment("Material's unique identifier");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<double>("ThermalConductivity")
                        .HasPrecision(18, 2)
                        .HasColumnType("double precision")
                        .HasComment("Thermal conductivity in W/mK");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(60)
                        .IsUnicode(true)
                        .HasColumnType("character varying(60)")
                        .HasComment("Material's type, e.g., Brick, Concrete");

                    b.HasKey("Id");

                    b.ToTable("Materials", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("3fdb3840-69b2-459b-8942-cb8fe226b3aa"),
                            IsDeleted = false,
                            ThermalConductivity = 0.67000000000000004,
                            Type = "Brick"
                        },
                        new
                        {
                            Id = new Guid("1f507fc6-87f7-4552-9b44-3f810c3c1af4"),
                            IsDeleted = false,
                            ThermalConductivity = 380.0,
                            Type = "Copper"
                        },
                        new
                        {
                            Id = new Guid("fcbe3b1c-aeb6-440e-b1cb-eb19591072b8"),
                            IsDeleted = false,
                            ThermalConductivity = 0.14999999999999999,
                            Type = "Wood"
                        },
                        new
                        {
                            Id = new Guid("63e6a38b-4514-4242-93e2-c3793d71c163"),
                            IsDeleted = false,
                            ThermalConductivity = 1.1499999999999999,
                            Type = "Glass"
                        },
                        new
                        {
                            Id = new Guid("d0e38ecc-fc39-49c6-8425-44b2a68801e3"),
                            IsDeleted = false,
                            ThermalConductivity = 1.7,
                            Type = "Limestone"
                        },
                        new
                        {
                            Id = new Guid("5dfb9e64-b1a2-4332-841b-c9ee60e5126d"),
                            IsDeleted = false,
                            ThermalConductivity = 230.0,
                            Type = "Aluminium"
                        },
                        new
                        {
                            Id = new Guid("cd2fbf4d-3005-494a-a3b6-5acad97ff86a"),
                            IsDeleted = false,
                            ThermalConductivity = 1.3999999999999999,
                            Type = "Stone"
                        },
                        new
                        {
                            Id = new Guid("927bdf77-0ba2-4b7f-a265-9c586c1fd4a9"),
                            IsDeleted = false,
                            ThermalConductivity = 0.14999999999999999,
                            Type = "Rubber"
                        });
                });

            modelBuilder.Entity("HVACrate.Domain.Entities.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasComment("Project's unique identifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2025, 7, 7, 13, 0, 16, 309, DateTimeKind.Unspecified).AddTicks(4209), new TimeSpan(0, 0, 0, 0, 0)))
                        .HasComment("The date when the project was created");

                    b.Property<Guid>("HVACUserId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTimeOffset>("LastModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2025, 7, 7, 13, 0, 16, 309, DateTimeKind.Unspecified).AddTicks(4437), new TimeSpan(0, 0, 0, 0, 0)))
                        .HasComment("The date when the project was modified for the last time");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("character varying(100)")
                        .HasComment("Name of the project");

                    b.Property<double>("RegionTemperature")
                        .HasPrecision(18, 2)
                        .HasColumnType("double precision")
                        .HasComment("Average external temperature of the region");

                    b.HasKey("Id");

                    b.HasIndex("HVACUserId");

                    b.ToTable("Projects", (string)null);
                });

            modelBuilder.Entity("HVACrate.Domain.Entities.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasComment("Room's unique identifier");

                    b.Property<Guid>("BuildingId")
                        .HasColumnType("uuid")
                        .HasComment("Reference to the building this room belongs to");

                    b.Property<int>("Floor")
                        .HasColumnType("integer")
                        .HasComment("The room's floor");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Number")
                        .HasMaxLength(10)
                        .IsUnicode(true)
                        .HasColumnType("character varying(10)")
                        .HasComment("Number of the room, e.g., A101, B102");

                    b.Property<double>("Temperature")
                        .HasPrecision(18, 2)
                        .HasColumnType("double precision")
                        .HasComment("Internal room temperature");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("character varying(50)")
                        .HasComment("The type of the room, e.g., Bathroom, Bedroom");

                    b.HasKey("Id");

                    b.HasIndex("BuildingId");

                    b.ToTable("Rooms", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("HVACrate.Domain.Entities.BuildingEnvelopes.Floor", b =>
                {
                    b.HasBaseType("HVACrate.Domain.Entities.BuildingEnvelope");

                    b.Property<double>("GroundWaterLength")
                        .HasPrecision(18, 2)
                        .HasColumnType("double precision")
                        .HasComment("Length of the floor's contact with groundwater (m)");

                    b.Property<double>("GroundWaterTemperature")
                        .HasPrecision(18, 2)
                        .HasColumnType("double precision")
                        .HasComment("Temperature of groundwater under the floor (°C)");

                    b.Property<double>("ThermalConductivityResistance")
                        .HasPrecision(18, 2)
                        .HasColumnType("double precision")
                        .HasComment("Resistance to heat flow through the floor structure (W·m²/K)");

                    b.ToTable("Floors", (string)null);
                });

            modelBuilder.Entity("HVACrate.Domain.Entities.BuildingEnvelopes.InternalFence", b =>
                {
                    b.HasBaseType("HVACrate.Domain.Entities.BuildingEnvelope");

                    b.ToTable("Internal fences", (string)null);
                });

            modelBuilder.Entity("HVACrate.Domain.Entities.BuildingEnvelopes.Opening", b =>
                {
                    b.HasBaseType("HVACrate.Domain.Entities.BuildingEnvelope");

                    b.Property<double>("AdjustedTemperature")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(18, 2)
                        .HasColumnType("double precision")
                        .HasDefaultValue(1.0)
                        .HasComment("Effective exterior temperature used in thermal transmission calculations (°C)");

                    b.Property<string>("Direction")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasComment("The direction of the building envelope, e.g., North, East");

                    b.Property<double>("JointLength")
                        .HasPrecision(18, 2)
                        .HasColumnType("double precision")
                        .HasComment("Length of joints surrounding the opening, used in heat loss calculation (m)");

                    b.Property<double>("VentilationCoefficient")
                        .HasPrecision(18, 2)
                        .HasColumnType("double precision")
                        .HasComment("Air exchange coefficient for ventilation through the opening");

                    b.ToTable("Openings", (string)null);
                });

            modelBuilder.Entity("HVACrate.Domain.Entities.BuildingEnvelopes.OuterWall", b =>
                {
                    b.HasBaseType("HVACrate.Domain.Entities.BuildingEnvelope");

                    b.Property<double>("AdjustedTemperature")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(18, 2)
                        .HasColumnType("double precision")
                        .HasDefaultValue(1.0)
                        .HasComment("Effective exterior temperature used in thermal transmission calculations (°C)");

                    b.Property<string>("Direction")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasComment("The direction of the building envelope, e.g., North, East");

                    b.Property<bool>("ShouldReduceHeatingArea")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasComment("Indicates if heat transmission area should be reduced by window/door area on this wall");

                    b.ToTable("OuterWalls", (string)null);
                });

            modelBuilder.Entity("HVACrate.Domain.Entities.BuildingEnvelopes.Roof", b =>
                {
                    b.HasBaseType("HVACrate.Domain.Entities.BuildingEnvelope");

                    b.Property<double>("AdjustedTemperature")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(18, 2)
                        .HasColumnType("double precision")
                        .HasDefaultValue(1.0)
                        .HasComment("Effective exterior temperature used in thermal transmission calculations (°C)");

                    b.ToTable("Roofs", (string)null);
                });

            modelBuilder.Entity("HVACrate.Domain.Entities.Building", b =>
                {
                    b.HasOne("HVACrate.Domain.Entities.Project", "Project")
                        .WithMany("Buildings")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("HVACrate.Domain.Entities.BuildingEnvelope", b =>
                {
                    b.HasOne("HVACrate.Domain.Entities.Material", "Material")
                        .WithMany("BuildingEnvelopes")
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HVACrate.Domain.Entities.Room", "Room")
                        .WithMany("BuildingEnvelopes")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Material");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("HVACrate.Domain.Entities.Project", b =>
                {
                    b.HasOne("HVACrate.Domain.Entities.HVACUser", "HVACUser")
                        .WithMany("Projects")
                        .HasForeignKey("HVACUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("HVACUser");
                });

            modelBuilder.Entity("HVACrate.Domain.Entities.Room", b =>
                {
                    b.HasOne("HVACrate.Domain.Entities.Building", "Building")
                        .WithMany("Rooms")
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Building");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("HVACrate.Domain.Entities.HVACUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("HVACrate.Domain.Entities.HVACUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HVACrate.Domain.Entities.HVACUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("HVACrate.Domain.Entities.HVACUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HVACrate.Domain.Entities.BuildingEnvelopes.Floor", b =>
                {
                    b.HasOne("HVACrate.Domain.Entities.BuildingEnvelope", null)
                        .WithOne()
                        .HasForeignKey("HVACrate.Domain.Entities.BuildingEnvelopes.Floor", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HVACrate.Domain.Entities.BuildingEnvelopes.InternalFence", b =>
                {
                    b.HasOne("HVACrate.Domain.Entities.BuildingEnvelope", null)
                        .WithOne()
                        .HasForeignKey("HVACrate.Domain.Entities.BuildingEnvelopes.InternalFence", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HVACrate.Domain.Entities.BuildingEnvelopes.Opening", b =>
                {
                    b.HasOne("HVACrate.Domain.Entities.BuildingEnvelope", null)
                        .WithOne()
                        .HasForeignKey("HVACrate.Domain.Entities.BuildingEnvelopes.Opening", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HVACrate.Domain.Entities.BuildingEnvelopes.OuterWall", b =>
                {
                    b.HasOne("HVACrate.Domain.Entities.BuildingEnvelope", null)
                        .WithOne()
                        .HasForeignKey("HVACrate.Domain.Entities.BuildingEnvelopes.OuterWall", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HVACrate.Domain.Entities.BuildingEnvelopes.Roof", b =>
                {
                    b.HasOne("HVACrate.Domain.Entities.BuildingEnvelope", null)
                        .WithOne()
                        .HasForeignKey("HVACrate.Domain.Entities.BuildingEnvelopes.Roof", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HVACrate.Domain.Entities.Building", b =>
                {
                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("HVACrate.Domain.Entities.HVACUser", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("HVACrate.Domain.Entities.Material", b =>
                {
                    b.Navigation("BuildingEnvelopes");
                });

            modelBuilder.Entity("HVACrate.Domain.Entities.Project", b =>
                {
                    b.Navigation("Buildings");
                });

            modelBuilder.Entity("HVACrate.Domain.Entities.Room", b =>
                {
                    b.Navigation("BuildingEnvelopes");
                });
#pragma warning restore 612, 618
        }
    }
}
